---
- name: Get Network Interface name From Prefix of IP Addresses Provided for Greenplum Nodes
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', rdo.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev1: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', rdo.net.ipaddr1 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', rdo.net.ipaddr2 ) | map(attribute='device') | first }}"


- name: Get IP Address from Provided Network Device Name
  set_fact:
    ipaddr0: "{{ hostvars[inventory_hostname]['ansible_'~netdev0].ipv4.address }}"
    ipaddr1: "{{ hostvars[inventory_hostname]['ansible_'~netdev1].ipv4.address }}"
    ipaddr2: "{{ hostvars[inventory_hostname]['ansible_'~netdev2].ipv4.address }}"


- name: Set Default Network Device and Address
  set_fact:
    _netdev: "{{ 'ansible_'~ netdev1 }}"
    _ipaddr: "{{ ipaddr1 }}"


- name: Set Default Network Device and Address
  set_fact:
    control_node_ipaddr: "{{ hostvars[groups['control'][0]]['ansible_'~ netdev1]['ipv4']['address'] }}"
    compute_node_ipaddr: "{{ hostvars[groups['compute'][0]]['ansible_'~ netdev1]['ipv4']['address'] }}"
    network_node_ipaddr: "{{ hostvars[groups['network'][0]]['ansible_'~ netdev1]['ipv4']['address'] }}"
    storage_node_ipaddr: "{{ hostvars[groups['storage'][0]]['ansible_'~ netdev1]['ipv4']['address'] }}"


- name: Define Fact of Network Address
  set_fact:
    network_range: "{{ hostvars[inventory_hostname][_netdev]['ipv4']['network'] }}/{{ ( hostvars[inventory_hostname][_netdev]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


- name: Define Fact of Specific IP Address Range
  set_fact:
    ip_addr_range: "{{ item }}"
  with_items: "{{ ansible_all_ipv4_addresses }}"
  when: "item | ansible.utils.ipaddr( network_range )"

